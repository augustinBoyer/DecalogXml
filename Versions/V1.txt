import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.*;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.apache.commons.math3.util.ArithmeticUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.xmlbeans.XmlObject;

public class Main
{
    public static void main(String[] args) throws ParserConfigurationException,
            SAXException, IOException {
        try {
            ArrayList<ArrayList<String>> lists = new ArrayList<>();

            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

            DocumentBuilder db = dbf.newDocumentBuilder();
            Document document = db.parse("C:\\Users\\Augustin\\Downloads\\reversibilite_muma_20221215\\reversibilite_muma_20221215\\entities\\JocondeItem\\JocondeItem_500_Test.xml");
            document.getDocumentElement().normalize();
            System.out.println("Root Element :" + document.getDocumentElement().getNodeName());
            NodeList nList = document.getElementsByTagName("schema");
            System.out.println("----------------------------");

            //1. Créer un Document vide

            //2. Créer une Feuille de calcul vide


            ArrayList<String> nodes = new ArrayList<>();

            int i = 0;

            for (int temp = 0; temp < nList.getLength(); temp++) {
                //ArrayList<ArrayList<String>> lists = new ArrayList<>();
                HSSFWorkbook wb = new HSSFWorkbook();
                Sheet feuille = wb.createSheet("new sheet");
                lists.add(new ArrayList<>());
                Node nNode = nList.item(temp);
                System.out.println("\nCurrent Element :" + nNode.getNodeName());

                if (nNode.getNodeType() == Node.ELEMENT_NODE) {

                    Element eElement = (Element) nNode;

                    NodeList atts = nNode.getChildNodes();

                    System.out.println(eElement.getTagName());
                    nodes = new ArrayList<>();

                    for (int j = 1; j < atts.getLength(); j++) {

                        nodes.add(atts.item(j).getNodeName());
                        j++;
                    }

                    if(i == 0){
                        lists.get(i).add("id");
                        for (int j = 0; j < nodes.size(); j++) {
                            lists.get(i).add(nodes.get(j));
                        }
                        i++;
                        lists.add(new ArrayList<>());
                    }


                    lists.get(i).add(eElement.getAttribute("id"));

                    for (int j = 0; j < nodes.size(); j++) {
                        lists.get(i).add(eElement.getElementsByTagName(nodes.get(j)).item(0).getTextContent());
                    }

                    i++;

                    for(int tp = 0; tp < lists.size(); tp++){
                        Row row = feuille.createRow((short)tp);
                        for(int tp0 = 0; tp0 < lists.get(tp).size(); tp0++){

                            /*int*/row.createCell(tp0).setCellValue(lists.get(tp).get(tp0));

                        }
                    }

                    FileOutputStream fileOut;
                    try {
                        fileOut = new FileOutputStream("Test\\nouveauFichier" + i + ".xls");
                        wb.write(fileOut);
                        fileOut.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            //System.out.println(lists);



        } catch(IOException  e) {
            e.printStackTrace();
        }
    }
}