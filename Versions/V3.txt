import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.util.*;
import org.w3c.dom.*;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.apache.commons.math3.util.ArithmeticUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.xmlbeans.XmlObject;

public class Main
{
    ArrayList<ArrayList> nodes = new ArrayList<>();

    public static void main(String[] args) throws ParserConfigurationException,
            SAXException, IOException {
        try {

            ArrayList<Hashtable<String, Tag>> arr = new ArrayList<Hashtable<String, Tag>>();


            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

            DocumentBuilder db = dbf.newDocumentBuilder();
            Document document = db.parse("C:\\Users\\Augustin\\Downloads\\reversibilite_muma_20221215\\reversibilite_muma_20221215\\entities\\JocondeItem\\JocondeItem_500_Test.xml");
            document.getDocumentElement().normalize();
            //System.out.println("Root Element :" + document.getDocumentElement().getNodeName());
            NodeList nList = document.getElementsByTagName("schema");
            //System.out.println("----------------------------");

            int i = 0;
            int h = 0;
            int z = 0;

            for (int temp = 0; temp < nList.getLength(); temp++) {
                h = 0;

                HSSFWorkbook wb = new HSSFWorkbook();
                Node nNode = nList.item(temp);
                Sheet feuille = wb.createSheet("new sheet");
                ArrayList<Tag> dico = new ArrayList<>();

                document.getDocumentElement().normalize();

                iterateNodes(dico, nNode, h);

                    int tp = dico.size() - 1;
                    int tp0 = 0;
                    System.out.println(dico);

                for(int g = 0; g < dico.size();g++){
                    System.out.println(dico.get(g).key);
                }


                for(int g = 0; g < dico.size();g++){
                    Row row = feuille.createRow((short)g);

                    row.createCell(dico.get(g).h).setCellValue(dico.get(g).key);

                    row.createCell(dico.get(g).h + 1).setCellValue(dico.get(g).text);

                    tp--;
                }


                    //arr.add(dico);

                    FileOutputStream fileOut;
                    try {
                        fileOut = new FileOutputStream("Test\\nouveauFichier" + i + ".xls");
                        wb.write(fileOut);
                        fileOut.close();
                        i++;
                        h = 0;
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
;
            }
            //System.out.println(arr);



        } catch(IOException  e) {
            e.printStackTrace();
        }
    }

    /*private static void iterateNodes(Node node, ArrayList<Tag> dico, int h, int z) {

        NodeList nodeList = node.getChildNodes();
        Tag tag = new Tag();
        h++;

        tag.h = h;
        tag.y = z;

        for (int i = 0; i < nodeList.getLength(); i++) {
            Node currentode = nodeList.item(i);
            if (currentode.getNodeType() == Node.ELEMENT_NODE) {

                //System.out.print("---------");

                if(currentode.getChildNodes().getLength() == 1){
                    tag.key = currentode.getNodeName();
                    tag.text= currentode.getTextContent();
                    dico.add(tag);

                    System.out.println(currentode.getTextContent());
                    System.out.println(currentode.getNodeName());
                    System.out.println(tag.text);

                }else{
                    tag.key = currentode.getNodeName();
                    tag.text= "";
                    dico.add(tag);
                    Element element = (Element) currentode;
                    iterateNodes(element, dico, h, tag.y);
                }



            }

        }*/

    private static void iterateNodes(ArrayList<Tag> dico, Node node, int h) {

        System.out.println("Node: " + node.getNodeName());

        NodeList nodeList = node.getChildNodes();




        for (int i = 0; i < nodeList.getLength(); i++) {

            if(i==0){
                h++;
            }else if(i == nodeList.getLength() - 1){
                h--;
            }

            Node currentode = nodeList.item(i);

            for(int g = 0; g < dico.size();g++){
                System.out.println(dico.get(g).key);
            }

            if (currentode.getNodeType() == Node.ELEMENT_NODE) {
                Tag tag = new Tag();


                tag.h = h;

                if(currentode.getChildNodes().getLength() == 1){

                    tag.key = currentode.getNodeName();
                    tag.text= currentode.getTextContent();
                    dico.add(tag);

                    System.out.println(currentode.getTextContent());
                    System.out.println(currentode.getNodeName());
                    System.out.println(tag.text);
                }else{

                    tag.key = currentode.getNodeName();
                    tag.text= "";
                    dico.add(tag);
                    Element element = (Element) currentode;
                    iterateNodes(dico, element, h);
                }
            }
        }
    }
}