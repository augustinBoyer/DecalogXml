import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.util.*;
import org.w3c.dom.*;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.apache.commons.math3.util.ArithmeticUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.xmlbeans.XmlObject;

public class Main
{
    private static void iterateNodes(ArrayList<String> tags, ArrayList<String> doc, Node node) {

        NodeList nodeList = node.getChildNodes();

        for (int i = 0; i < nodeList.getLength(); i++) {
            Node currentode = nodeList.item(i);

            if (currentode.getNodeType() == Node.ELEMENT_NODE) {
                Element element = (Element) currentode;
                if(!HasElement(currentode)){
                    tags.add( currentode.getNodeName());
                    doc.add( currentode.getTextContent());
                }

                iterateNodes(tags, doc, element);
            }
        }
    }

    public  static boolean HasElement(Node element){
        NodeList list = element.getChildNodes();
        int l = list.getLength();
        for(int i = 0; i < list.getLength(); i++){
            if(list.item(i).getNodeType() == Node.ELEMENT_NODE) {

                return true;
            }else if(list.item(i).hasChildNodes()){
                return HasElement(list.item(i));
            }
        }
        return false;
    }



    public static void main(String[] args) throws ParserConfigurationException,
            SAXException, IOException {

        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        String name = "C:\\Users\\Augustin\\Downloads\\reversibilite_muma_20221215\\reversibilite_muma_20221215\\entities\\JocondeItem\\JocondeItem_500_Test.xml";
        File file = new File(name);

        DocumentBuilder db = dbf.newDocumentBuilder();
        Document document = db.parse(name);
        document.getDocumentElement().normalize();
        NodeList nList = document.getElementsByTagName("document");

        ArrayList<ArrayList<String>> docs = new ArrayList<>();
        ArrayList<ArrayList<String>> strs = new ArrayList<>();


            strs = new ArrayList<>();
            Element docElement = (Element) nList.item(0);

            NodeList schemas = docElement.getElementsByTagName("schema");

            for (int j = 0; j < schemas.getLength(); j++) {
                ArrayList<String> str = new ArrayList<>();
                Element tag = (Element) schemas.item(j);
                ArrayList<String> doc = new ArrayList<>();
                NodeList t = tag.getChildNodes();

                for (int k = 0; k < t.getLength(); k++) {
                    Node tt = t.item(k);
                    if (t.item(k) != null) {
                        if(!HasElement(t.item(k)) && t.item(k).getNodeType() == Node.ELEMENT_NODE){
                            str.add(t.item(k).getNodeName());
                            doc.add(t.item(k).getTextContent());
                        }else{
                            iterateNodes(str, doc, t.item(k));
                        }



                    }
                }
                docs.add(doc);
                strs.add(str);
            }
        System.out.println(strs);
        System.out.println(docs);
        System.out.println("==============================");

ArrayList<String> f = new ArrayList<>();

        System.out.println(docs);
    }

}